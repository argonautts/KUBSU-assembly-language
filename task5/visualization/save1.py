import tkinter as tk
import os  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤ Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
water_level = 0
orange_light_on = False
red_light_on = False
siren_on = False
max_water_level = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
canvas_height = 600  # –í—ã—Å–æ—Ç–∞ –∫–∞–Ω–≤–∞—Å–∞
canvas_width = 600   # –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞
water_rectangle = None
orange_light_circle = None
red_light_circle = None
siren_symbol = None
sensor_size = 10  # –†–∞–∑–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞

def play_siren_sound():
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–≤—É–∫–∞)
    os.system('afplay /System/Library/Sounds/Glass.aiff')

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
def update_status():
    global water_level, orange_light_on, red_light_on, siren_on, water_rectangle

    if water_level >= 1:
        orange_light_on = True
    else:
        orange_light_on = False

    if water_level >= 3:
        red_light_on = True
        siren_on = True
    else:
        red_light_on = False
        siren_on = False

    if siren_on:
        play_siren_sound()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–¥—ã
    water_height = water_level / max_water_level * canvas_height
    canvas.coords(water_rectangle, 10, canvas_height - water_height, canvas_width - 10, canvas_height)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ª–∞–º–ø –∏ –≥—É–¥–∫–∞
    canvas.itemconfig(orange_light_circle, fill=("orange" if orange_light_on else "white"))
    canvas.itemconfig(red_light_circle, fill=("red" if red_light_on else "white"))
    canvas.itemconfig(siren_symbol, state=("normal" if siren_on else "hidden"))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã
    water_level_label.config(text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: {water_level} –º")

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–º –≤–æ–¥—ã
def increase_water_level():
    global water_level
    water_level = min(water_level + 0.5, max_water_level)
    update_status()

def decrease_water_level():
    global water_level
    water_level = max(water_level - 0.5, 0)
    update_status()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
root = tk.Tk()
root.title("–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∞–≤–∞—Ä–∏–π–Ω—ã–º –ø–æ–¥—ä–µ–º–æ–º –≤–æ–¥—ã")

canvas = tk.Canvas(root, height=canvas_height, width=canvas_width)
water_rectangle = canvas.create_rectangle(10, canvas_height, canvas_width - 10, canvas_height, fill="blue")

# –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∏ –∫—Ä–∞—Å–Ω–æ–π –ª–∞–º–ø—ã, –∞ —Ç–∞–∫–∂–µ –≥—É–¥–∫–∞
orange_light_circle = canvas.create_oval(20, 20, 60, 60, outline="black", fill="white")
red_light_circle = canvas.create_oval(canvas_width - 60, 20, canvas_width - 20, 60, outline="black", fill="white")
siren_symbol = canvas.create_text(canvas_width / 2, 40, text="üîä", font=("Arial", 24), state="hidden")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è 1–º –∏ 3–º —É—Ä–æ–≤–Ω–µ–π
line_1m = canvas.create_line(0, canvas_height * 0.8, canvas_width, canvas_height * 0.8, fill="black")
line_3m = canvas.create_line(0, canvas_height * 0.4, canvas_width, canvas_height * 0.4, fill="black")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ 1–º
sensor_1_1m = canvas.create_rectangle(30 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   30 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")
sensor_2_1m = canvas.create_rectangle(canvas_width / 2 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   canvas_width / 2 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")
sensor_3_1m = canvas.create_rectangle(canvas_width - 30 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   canvas_width - 30 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ 3–º
sensor_1_3m = canvas.create_rectangle(30 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   30 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")
sensor_2_3m = canvas.create_rectangle(canvas_width / 2 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   canvas_width / 2 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")
sensor_3_3m = canvas.create_rectangle(canvas_width - 30 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   canvas_width - 30 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")

canvas.pack()

water_level_label = tk.Label(root)
water_level_label.pack()

increase_button = tk.Button(root, text="–£–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã", command=increase_water_level)
increase_button.pack()

decrease_button = tk.Button(root, text="–£–º–µ–Ω—å—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã", command=decrease_water_level)
decrease_button.pack()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
update_status()
root.mainloop()

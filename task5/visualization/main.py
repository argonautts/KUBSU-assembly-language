import tkinter as tk
import os
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
water_level = 0
old_water_level = water_level
orange_light_on = False
red_light_on = False
siren_on = False
timer_started = False
start_time = None
current_time = 0
current_mA = 15  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã —Ç–æ–∫–∞
max_water_level = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
canvas_height = 600  # –í—ã—Å–æ—Ç–∞ –∫–∞–Ω–≤–∞—Å–∞
canvas_width = 600   # –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞
water_rectangle = None
orange_light_circle = None
red_light_circle = None
siren_symbol = None
sensor_size = 10  # –†–∞–∑–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–ª—ã —Ç–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
current_values = {0: 15, 0.5: 16, 1: 17, 1.5: 18.5, 2: 19.5, 2.5: 20, 3: 20.5, 3.5: 20.8, 4: 21, 4.5: 21.2, 5: 21.4,
                  5.5: 21.6, 6: 21.7, 6.5: 21.8, 7: 21.85, 7.5: 21.88, 8: 21.9, 8.5: 21.93, 9: 21.95, 9.5: 21.97, 10: 22}

def play_siren_sound():
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    os.system('afplay /System/Library/Sounds/Glass.aiff')

def reset_timer_and_current():
    global timer_started, start_time, current_time, current_mA
    timer_started = False
    start_time = None
    current_time = 0
    current_mA = 15  # –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–ª–µ —Ç–æ–∫–∞

def update_timer_and_current():
    global timer_started, start_time, current_time, current_mA

    if red_light_on and not timer_started:
        start_time = time.time()
        timer_started = True

    if timer_started:
        current_time = time.time() - start_time
        if current_time > 10:
            current_time = 10
            timer_started = True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥
        current_mA = current_values.get(int(current_time), 22)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª—ã —Ç–æ–∫–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    timer_label.config(text=f"–í—Ä–µ–º—è: {current_time:.1f} —Å–µ–∫")
    current_label.config(text=f"–°–∏–ª–∞ —Ç–æ–∫–∞: {current_mA} –º–ê")

def update_status():
    global water_level, orange_light_on, red_light_on, siren_on, water_rectangle, old_water_level

    if water_level < old_water_level:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–º–µ–Ω—å—à–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã
        reset_timer_and_current()

    old_water_level = water_level  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã

    if water_level >= 1:
        orange_light_on = True
    else:
        orange_light_on = False

    if water_level >= 3:
        red_light_on = True
        siren_on = True
    else:
        red_light_on = False
        siren_on = False

    if siren_on:
        play_siren_sound()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–¥—ã
    water_height = water_level / max_water_level * canvas_height
    canvas.coords(water_rectangle, 10, canvas_height - water_height, canvas_width - 10, canvas_height)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ª–∞–º–ø –∏ –≥—É–¥–∫–∞
    canvas.itemconfig(orange_light_circle, fill=("orange" if orange_light_on else "white"))
    canvas.itemconfig(red_light_circle, fill=("red" if red_light_on else "white"))
    canvas.itemconfig(siren_symbol, state=("normal" if siren_on else "hidden"))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã
    water_level_label.config(text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: {water_level} –º")

def increase_water_level():
    global water_level
    water_level = min(water_level + 0.5, max_water_level)
    update_status()

def decrease_water_level():
    global water_level
    water_level = max(water_level - 0.5, 0)
    update_status()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
root = tk.Tk()
root.title("–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∞–≤–∞—Ä–∏–π–Ω—ã–º –ø–æ–¥—ä–µ–º–æ–º –≤–æ–¥—ã")

canvas = tk.Canvas(root, height=canvas_height, width=canvas_width)
water_rectangle = canvas.create_rectangle(10, canvas_height, canvas_width - 10, canvas_height, fill="blue")

# –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∏ –∫—Ä–∞—Å–Ω–æ–π –ª–∞–º–ø—ã, –∞ —Ç–∞–∫–∂–µ –≥—É–¥–∫–∞
orange_light_circle = canvas.create_oval(20, 20, 60, 60, outline="black", fill="white")
red_light_circle = canvas.create_oval(canvas_width - 60, 20, canvas_width - 20, 60, outline="black", fill="white")
siren_symbol = canvas.create_text(canvas_width / 2, 40, text="üîä", font=("Arial", 24), state="hidden")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è 1–º –∏ 3–º —É—Ä–æ–≤–Ω–µ–π
line_1m = canvas.create_line(0, canvas_height * 0.8, canvas_width, canvas_height * 0.8, fill="black")
line_3m = canvas.create_line(0, canvas_height * 0.4, canvas_width, canvas_height * 0.4, fill="black")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ 1–º –∏ 3–º
sensor_1_1m = canvas.create_rectangle(30 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   30 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")
sensor_2_1m = canvas.create_rectangle(canvas_width / 2 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   canvas_width / 2 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")
sensor_3_1m = canvas.create_rectangle(canvas_width - 30 - sensor_size / 2, canvas_height * 0.8 - sensor_size / 2,
                                   canvas_width - 30 + sensor_size / 2, canvas_height * 0.8 + sensor_size / 2, fill="gray")

sensor_1_3m = canvas.create_rectangle(30 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   30 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")
sensor_2_3m = canvas.create_rectangle(canvas_width / 2 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   canvas_width / 2 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")
sensor_3_3m = canvas.create_rectangle(canvas_width - 30 - sensor_size / 2, canvas_height * 0.4 - sensor_size / 2,
                                   canvas_width - 30 + sensor_size / 2, canvas_height * 0.4 + sensor_size / 2, fill="gray")

canvas.pack()

water_level_label = tk.Label(root)
water_level_label.pack()

increase_button = tk.Button(root, text="–£–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã", command=increase_water_level)
increase_button.pack()

decrease_button = tk.Button(root, text="–£–º–µ–Ω—å—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã", command=decrease_water_level)
decrease_button.pack()

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–ª—ã —Ç–æ–∫–∞
timer_label = tk.Label(root)
timer_label.pack()

current_label = tk.Label(root)
current_label.pack()

update_status()

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
while True:
    update_timer_and_current()
    root.update_idletasks()
    root.update()
